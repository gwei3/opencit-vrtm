RP Crypto Library

Introduction
The RP crypto library implements a  number of cryptogrphic algorithms. This is currently being used for RP projects. The library provides a c/c++ level APIs for cryptographic primitives. Version 1.0 of the library was  released on May 10, 2013. This is targetted for Linux platforms(Kernel 3.2.44 and above).

Overyview
librpcrypto consists of a number of functionalities and includes cryptographic random number generation, symmetric and public key generation, symmetric and public key encryption and decryption, cryptographic hash functions and public key (RSA) based signature and verifications. It also includes base64 functionality for enconding/decoding. Finally, it has few functions specifically for  RP crypto library initialization and cleanup.


- Release (1.10) - Sep 11, 2013
  -No change in functionality.

- Release (1.9) - Sep 03, 2013
  -No change in functionality.

- Release (1.8) - Aug 30, 2013
  -No change in functionality.

- Release (1.7) - Aug 16, 2013
  This fixes the issue of buffer based symmetric encryption for length > 16. The
  file based is working fine.  Sample program sent to user to verify with this
  release. Test program also fixed.

- Release (1.6) - Aug 6, 2013
  This fixes the issue of RSA Encrypt/Decrypt failing sometimes. The root cause 
  was the RSA Key generation and is fixed in this release.

- Release (1.5) - Jul 31, 2013
  Fix the documentation(API Specs).

- Release (1.4) - Jul 19, 2013
  No change.

- Release (1.3)  - Jul 8, 2013
  - GenerateQuote and VerifyQuote API issues fixed(Return -99 in 1.2 release). API interfaces also changed.

- Release (1.2)  - Jun 21, 2013
  -Symmetric key encryption APIs(4 APIs) have changed. Release 1.0 defaulted 
   the integrity key to the encryption key. This release lets the user select
   a different key as the integrity key. 
  -Seal and Unseal APIs are implemented in this release.
  -GenerateQuote and VerifyQuote API are also implemented in this release.
  -The sample example(rpapisample1.cpp) is modified for the new APIs involving symmetric encryption and decryption.
  -The GetMAC API had an underlying bug(wrong HMAC algorithm) and has been fixed in this release.
  - The RSA Keys(generated and saved in xml files) will not be compatible will be previous releases and vice-versa. We do not provide a tool to do the conversion. 

- Initial release (1.1) - Jun 4, 2013
  - Bug Fix Release.
  - RSA Key Generation bug (which cause RSA Encrypt/Decrypt to fail) fixed.
  - Compilation instruction (-I../inc added) for modified sample program(s).
  - Sample example program using the RP Crypto APIs(RSA). Source files - rpapisample3.cpp and rpapisample3.h.

- Initial release (1.0) - May 10, 2013
  - public key: RSA encrypt
  - secret key: AES
  - hash:  SHA-1, SHA-256
  - HMAC 
  - modes: CBC
  - converters: Base64
  - key derivation : PBKDF2

Installation:
Untar(tar -xvf <tar file>) the RP Crypto library into a directory of your choice($ROOT). The rp library will be installed there and will have the following directory structure and contents:

$ROOT
└── rp
    ├── examples
    │   ├── PlainText1
    │   ├── rpapisample1.cpp
    │   └── rpapisample1.h
    ├── inc
    │   └── rpapi.h
    ├── lib
    │   └── librpcrypto.a
    ├── ReleaseNotes.txt
    └── RPapidoc.txt

Files:
  - librpcrypto.a : This is the RP Crypto library which needs to be linked to the program using RP Crypto functioanlity.
  - rpapi.h : The .h file that needs to be included by a RP Crypto based program/modules.
  - ReleaseNotes.txt: This file containing the updated release notes.
  - rpapidoc.txt : Contains some documentation about the APIs.
  - rpapisample.cpp,rpapisample.h: A sample program using the RP Crypto APIs.
  - PlainText1: A plaintext file used by the sample program.

Compilation and Execution of the Sample Program:
After untarring the RP Crypto library into the $ROOT directory, cd to rp/examples directory where you will find the sample program(s). Issue the following command(s) at the terminal:

g++ rpapisample1.cpp -I../inc -o rpapisample1 -L../lib -lrpcrypto

Execute the program by entering the following at the shell prompt:
./rpapisample1

<----------------------------------------------------------------------------------------------->

