Changes to code during the April Reorg
======================================


In April the code was reorganized and some rewritten party as
a result of building bidProxy and authProxy.  Here is an overview
of the changes.


1.  The bignum code was rewritten and is faster and simpler.  
    A fast RSA decrypt which uses the Chinese remainder theorem
    was implemented as well as an extensive set of tests for bignum.
    The tests are in Code/Test/mpTest.  This code presents the 
    same interface as the old so should just "drop in."  
    Because of the CRT decrypt, a few more parameters were added
    to the RSA Key structure in keys.h.  The new code fixes known
    bugs in the existing version.

2.  A set of crypto helper functions was implemented in 
    jlmcrypto/cryptoHelper.cpp for common patterns
    using RSA and some of the XML stuff.  As a result,
    there are two functional improvements: the endianness for 
    signing and verifying are centralized and
    now comply with the usual practice; and, the "correct" padding
    for RSA encrypted challenges is implemented so that we no longer
    re-use the "signing" padding.  This should probably be replaced
    by OAEP soemtime but it's all there.  Encrypt-then-MAC is
    turned on be default.  As a result of using the helper functions,
    cryptUtility's main shrank by about half.

3.  The session object was moved to a new directory called 
    protocol channel it does all the work of key management and 
    protocolNego for both a client and a server and 
    As a result, programs can have multiple channels to different programs.  
    Some programs (like sellerClient) never use this nego anyway and 
    don't need to compile it.  The new object input is the TCP socked
    and a safeChannel object.  If the connection was established,
    the safechannel can be used for communication (usually in the
    processRequests loop).  This greatly reduced the duplicated code
    in FileClient and FileServer as a result.

4.  "Services" like the request-response for file access is moved out of
    fileClient and fileServer to a new object called fileServices in
    fileServices.cpp.  One can do the same for "bidServices" or "authServices"
    and thus the fileClient and fileServer code is simpler and more adaptable
    to other applications.  Most of the response-request code can be re-used
    for different applications.  processRequest for services moves to this
    new object.

5.  Claims processing and access control have been seperated.  The claims
    processing is in claims (newclaims for now) and access control is in
    accessControl.  As a result, clients no longer need to link in unused
    accessControl code which is not used in the client and data handling
    (the vault) is also factored.  Claims processing got a little more flexible
    so that "purpose" can be incorporated in claims thus allowing one to
    validate keys for different purposes like SSL, signing and encryption.


Files and directories changed

All access control moved to accessControl.  secPrincipal.* in claims replaced by
cert.* and quote.* and claims.* replaced by validateEvidence.*.  validateEvidence
uses the new cryptoHelper functions.  rsaHelper was removed, the parts not replaced
by cryptohelper were moved into session.*.   The functions in resources were moved
into fileProxy since that's where they are used.

After integration, oldjlmbignum should be archived.  fileProxy should be 
archived and replaced by newfileProxy (renamed to fileProxy).
claims should be archived and replaced by newclaims (renamed to claims).
jlmcrypto should be archived and replaced by newjlmcrypto (renamed to jlmcrypto).
cryptUtility should be archived and replaced by newcryptUtility (renamed to cryptUtility).
resources should be archived and accessControl and protocolChannel will be compiled
into images.  

I need to reintegrate the changes into keyNegoserver but they are
segregated enough that I didn't create a newkeynegoserver.

TPMUser, TPMDirect, tao, commonCode, most of jlmcrypto (except for cryptoHelper 
and modesandpadding),  and channels were essentially not changed (in a couple of 
cases, new header files were included; this is marked by the NEWREORGANIZED define 
so that they could be compiled with existing code or the reorganized versions.)

As a result, new "clients" and "servers" should be buildable with fewer changes and
no unnecessary code included for compatibility and accessControl is better factored
so it can be upgraded.  In fact, all the components are factored better for inclusion
in CloudProxy "libraries" and independent upgrade.

